Perhaps miss-named "software" file to design our general layout for what the hell the FPGA does:

Memory addresses:
one address to write a command



To send a command to an acq board:
There's a memory address that the DSP writes the acqboard command to, to say, change gain. Then it can read and poll. The question is, how long should it poll?

well, it can only send one command per sample interval, obviously, and _at most_ that, as we have to wait for the other one. 

maybe each DSP will have a linked list of to-acqboard? or a queue or something like that? 

Every time an acqboard event is done, we send it. 

Even CMDID for one DSP, odd for another. FPGA partitions them out. 


how to read events, given they may be being written by the FPGA? need some sort of mutex or something. 

read events, put them in an event queue, and process the queue
append to an output queue of events

FPGA: circualr buffer? something like that? 


For booting: 
   The ADSP loads 256 32-bit words (1024 bytes) in 8-bit parallel mode (running very slowly) as the loader kernel
   We can map in 2 blockselect+ RAMs for this purpose


So, the design is probably not going to fit into the -50 part. But, I only know this having sized the few sub-parts. So, 
    1. It's only an extra $5/board to go to the -100, which will fit for certain
    2. It's not very obvious at all how i could shrink it anyway
    3. i might want growth room in the future
    4. There might be some synergy from doubling up that makes it actually fit



-----------------------------------------------------------------------------
EVENTS
-----------------------------------------------------------------------------

Okay, we're gonna be un-lame and re-do the event interface. Each Events component will have 2 rx fifos and 1 send fifo. 

RX fifo : 8 words/event = 32 events/block select = 64 events in queue total
TX fifo : 16 words/event = 16 events total. Yea, well, don't send a ton of events !!

This should really simplify the FSM!

We need to read MODE, MODERST, DSPRESET, RAIN, RWE, and RDIN. 

however, there's nothing wrong with having these signals pass into the CLK domain (from SYSCLK) at the last minute. However, timing for the aggregate system will be _tight_, but that doesn't mean we can't just do things combinationally. 
What if we sample EVENT to check for events to read, write, and we do all on each cyle? 
    eliminates the acknowledge issues for reading
    reading takes 7 ticks, writing 10? ouch!
    This is going to require some creative, tight FSMing
    
    we get INPUT EVENTs 


Event Input:
    updated each input cycle
    EMINE == the most recent event was for me
    EVENT : registered inputs. This is delayed by 2 ticks (as is the final output register set) to deal with clock-transition issues
           

Pipeline chart:
stage : 0   1   2   3   4   5   6   7   8   9   10   11   12  13  14  15
EVENT:  1   0	1   1	1   1	1   0	1   1	1    1	  1   0	  1   1
EVENTL: 1   1	0   1	1   1	1   1	0   1	1    1	  1   1	  0   1
CNT	x   x	x   0	1   2	3   4	5   0	1    2	  3   4	  5   0
DATA:	x   x	D01 D1	D2  D3	D4  D51	D02 D1	D2   D3	  D4  D52 D0  D1
DATAL	x   x	x   D0	D1  D2	D3  D4	D51 D02	D1   D2	  D3  D4  D52 D0
ADDR	x   x	A0  A1	A2  A3	A4  A5	A0  A1	A2   A3	  A4  A5  A0  A1
ADDRL	x   x	x   A0	A1  A2	A3  A4	A5  A0	A1   A2	  A3  A4  A5  A0
D0	x   x	x   x	D01 D01 D01 D01	D01 D01	D02  D02  D02 D02 D02 D02
D5	x   x	x   x	x   x	x   x	x   D51 D51  D51  D51 D51 D51 D52
for this one, myaddr: 0x20
SMINE	x   x   x   x   x   x   1   1   1   0   0    0	  0   0   0   0
MINE	x   x   x   x	x   x	x   x	x   1	0    0    0   0   0   0
EMINE   x   x	x   x	x   x	x   x	x   x	1    1	  1   1	  1   1


please note that the S/R latch for SMINE is very unusual in that the SET overrides the RESET


Event output:
    ADDR[3:0] : first 3 words are targets, next 6 are data
    just write straight in
    writing the last word(ADDR=8) arms
    wait for DONE to be high before writing again. 


    So, this is interesting in that we've got to deal with the issue of too few pipeline cycles -- we need outsel to be 0, then 1, asap. 



FSM notes:
   we have simple single-states for DSP reset and boot mode setting
   I was briefly worried as to the synchronous nature of the block ram, but:
      1. most of our transactions either don't involve buffer ram (i.e. MODEEN)
	 or only write to it (DSPRAM1, etc.)
      2. ADDRB[3:0] = n occurs at state n-1, such that by state n, we will have the value on edin. 

   for an event (all events), we always write the first word to ram-- 
     this has no effect, as the addr should always be pointing to the next addr in the circular buffer
    Wow, this FSM is longer than I thought it would be. ouch. 


note that the BUFSEL line is just a decoding of the higher-order bits of the address, but in keeping with our plan to do all decoding in DSPIO, we take in this line. note BUFWR = 1 => higher chunk of address space in the buffer =>

    

FPGA must be able to decode events initially, for booting, etc. 

FPGA receive the following events:
  boot
  boot byte
  reset time
  set board ID


To accelerate the reading of events, we're actually going to store them in an async-read register set (made up of SRL16Es?) such that "NEWEVENTS" actually means "there is an event in this buffer ready for you to read!"

It requires a new FSM, but whatever. 

Our new FSM design which converts the events into an asynchronous read, coupled with moving the selection-muxes for output _in front_ of the first addr register, has given something that works at PPDUR10.


DSP side of event-interface: ---------------------------
writing an event actually writes to a series of 9 registers, 



EVENT:
   CMD = 0x01 SENDER = any dw0[0] == set into boot mode0
   CMD = 0x02 SENDER = any dw0[0] == state of DSP RESET pin
   CMD = 0x03 SENDER = any dw0 = addr of first word
			   dw1 = first word to write dw=4 last word of 4
   CMD = 0x04 sender = timer tells us the current time, and wehther or not
		       to reset the timer.	  
		       dw0[0] = 1 == reset the timer
		       dw2  == high word of current time
		       dw3  == low word of current time
   CMD = 0x05 sender = any : memory write-in for kernel loader

   CMD = 0x40 - CMD = 0x4F : DSP-config events, defined in DSPasm.txt


So, for setting boot mode, we need to actually "set boot mode" and then wait for the DSP to clear it. We can't just have the DSP send an event, because the boot mode dictates that the FPGA still thinks the parallel port is in 8-bit mode.

However, if the FPGA is in 8 bit mode (expecting DATA(15:8) to be driven) and the ADSP switches to 16-bit mode, there's no harm. Then, the ADSP can write to addr(0xF000) and switch out of boot mode!!!




------------------------------------------------------------------------------
DEVICE ID ASSIGNMENT
------------------------------------------------------------------------------
Upon bootup, each device on the bus will need to learn its event bus ID. This is done by putting the device's ID on the event bus data lines (7:0) and triggering both EVENT and ECE. DSP boards get two IDs, the one assigned and the one after them. For example:

DSPboard is given ID 30
then Tetrode A is 30, Tetrode B is 31



------------------------------------------------------------------------------
FPGA main data FIFO
------------------------------------------------------------------------------
a "mode" bit:
   0 == normal operation as a data fifo
   1 == just acting as RAM

Signals:

Random access memory signals for booting and boot control:
RAIN[9:0] : random access address for input(writing)
RAOUT[10*:0] : random access address for output(reading) 
RDOUT[7:0] : random access data output
RDIN[15:0] : random access data input
RWE : ram write enable

instead of being the obvious fifo, we'll use 3 blockselect+ blocks to do a triple-buffered block appraoch. This will let us have 3 512-byte blocks. x2 dsps, still leaves enough for the 1 event each. 

to detect a done buffer: 
   we have a register (BUFEND) at location foo that gets written whenever the address == the address of the length field. Each "newbuffer" resets that register to 0xFFFF, i.e. "not gonna get written". We consier a frame "done" when ADDR = BUFEND and there's a write. 

buffer input side
BUFWE : write this byte
BUFADDRIN[7:0] : input address
BUFDIN[15:0] : input data to write
BUFERROR : occurs when we are in state AWAIT, and try to do a WE


buffer outputs:
BUFDOUT[15:0] : output data
BUFNEXT: input to say "gimme the next frame"
BUFACKOUT : high when BUFDOUT is a valid byte. 

the output of this system is very similar to what's needed to talk to the data bus, to modularize that functionality and save myself some work. 


CLKA : clock on the DSP side
CLKB : clock on the data bus side

For internal data frames, the "length" argument is 2-byte words, always includes the total frame length, and is preceeded by a 1-word header that looks like:

bits 5:0 : source ID (tetrode number
bit 7:6 : type (spike/eeg) spike = 0, eeg = 1
bit 15:7 : total length of frame in 2-byte words (0 == 256 == 512b)




Data Mux:
   Simply alternates DATAENs between the two buffers
   NEXTA or NEXTB == not DATaEN, i.e. NEXTn is assert-high
   ACK = not ACKA, because again, we go from assert-high to assert-low
 


-----------------------------------------------------------------------------
TIMER INTERFACE
-----------------------------------------------------------------------------

We get the global TINC signal, and the "RESET CLOCK" event. 

There is the system-wide TINC signal, which is clocking along at SYSCLK, and is a single tick. 

When we get an EVENT with ID = 4 , we will reset the clock the next time we get a TINC. 

The output of the TINC signal is delayed by three ticks, allowing the RX of the appropriate event to arm the TCLR flag. 




 





------------------------------------------------------------------------------
ADSP EXTERNAL MEMORY INTERFACE
------------------------------------------------------------------------------
The ADSP will do 16/32 packing. It seems smarter to pack 16-bit words on our side, i.e. for separate 16-bit values 0xAB and 0xCD, we send 0xABCD instead of 0x00AB and 0x00CD. The later takes four reads, the former two, and it's a lot easier once inside the DSP to split them. This isn't _always_ the case, mind you, but in general will be the .plan. 

For external accesses, then, we need to remember that we're really accessing 32-bit values. We use the notion L to denote the low word and H to denote the high word. 

The external memory space is partitioned into "regions", which begin on a 12-bit boundary. Hey, memory space is cheap :) However, parallel port doesn't support chaining. fuckers. 

We need to adopt a policy that any component can be re-mapped anywhere in the address space -- this results in code only caring about the LSBs of an address, and only the DSPIO module can set actual bits, by setting WEs and mux'd outputs. 



Region	Use:
	memory addr : FPGA addr
0x0	this is the DMA-at-the-beginning-of-each-cycle word, along with metadata
	0x0000 : metadata, i.e. are we connected, 
			  this sample was  bad, etc.
			  bit 0: STATUS (fiber status, 1=up, 2 =down)
			  bit 1: TXERROR : fiber command trasnmit error.
		     bits 4:7 : most recent CMDID
			  8:11 : CMDSTS
	0x0001 : sample from channel 0
	0x0002 : sample from channel 1
	0x0003 : sample from channel 2
	0x0004 : sample from channel 3
	0x0005 : sample from continuous channel
	0x0006 : debug 0x1234
	0x0007 : My device ID


0x2	0x2000 : Output data buffer
	the length word is the length of the packet. If we don't write
	the correct number of bytes, the packet won't be committed
	If we write too many, the higher ones are ignored. 
	Remember that, according to the  format, the first word we write
	is of the form :
	  7:0 : source
	  15:8 : length, in 2-byte words
	
		
0x4	outbound events : write an event here:
	0x4000 : low set of targets
	0x4001 : medium set of targets
	0x4002 : high set of targets
	0x4003 : cmd word
	0x4004 : first word
	0x4005 : second word
	0x4006 : third word
	0x4007 : next 2 words
	0x4009 : a write here "commits" the event 
			  to the event out buffer

0x6	inbound events:
	0x6000 : cmd word
	0x6001 : first word
	0x6002 : next two words
	0x6003
	0x6004 : next two words
	0x6005 : next two words
	0x6006 : a read here says "i'm done reading this event"

0x8     acqboard control interface
	0x8000 : status word
	0x8020 : command (bits 3:0)
	0x8021 : cmdid (bits 2:0)
	0x8022 : command words :
		 0:7 one
		 8:15 two
	0x8023 : command words :
		 0:7 thee
		 8:15 four
	0x8024 : complete the CMD, i.e. send

Booting occurs in 8-bit mode, which uses the ALE cycle to put the 16 MSBs of a 24-bit address on the line. Thus during boot, we see ADDR on the FPGA == 0x0800. 

We use the inbound RD\ to control the TS. When RD = 1, the DSP isn't reading, therefor we're not writing, and thus the output should be tristated. This results in us tristating as quickly as possible following the RD cycle. What a neat idea!




------------------------------------------------------------------------------
FPGA FIBER RX / TX
------------------------------------------------------------------------------

We want to be able to receive command updates, send commands, and send an event when there are lots of errors, or something like that. 

How do we tell the difference between "lots of errors" and "no cable connected"?
Solution: you don't. Every error you get triggers a "disconnected" state

You only reconnect when you get two straight frames of no error. 

the transition from disconnected to connected causes us to generate an event, but we'll let the DSP (which is polling the connected bit) handle that. 

we just read in bytes, count up
if we get an error, reset counter, change status from sync to nosync
dsp flushes buffers


Normally, the command interface just sends out frames full of zeros. But should it get a command, it will write it out once. 

We just do this as a big FSM, which is conditioned on OUTBYTE. Simple stuff. 

CLK8 is an 8 MHz CLKEN, and OUTBYTE = 10x CLK8


However, in this scenario, what happens when two DSPs try to writean event at the same time, we get a race condition. DSPA fills up its registers, DSPB fills up its regs, and we send them one after another. 

One solution is to make the FPGA wait unitl the cmdevent is updated to switch to querying the other DSP. The problem then becomes... what happens if the event never arrives???? We can handle the disconnect state just fine, but what if the acqboard crashes, or something like that.... 

We will have a watchdog "Acqboard timeout timer" on the fiber TX section. 
Protocol is (again, symmetric wrt DSPs)
1. if DSPA wants to send an event, send event
   wait for CMDID update = DSPACMDID
   if ACQTOUT = acqmax then 
      set acqboardtimeout status bit for DSPA
      bit is only cleared by another write from the DSP
   end if
2. process DSPB using a similar metric. 
  

Basically, the idea is that:
   Both DSPs can write at once, but the FiberTX FSM will handle one at a time
   Acqboard oddities will be handled thanks to a watchdog timer, which will invalidate the current event-writing and cause a transition to the trying to service the next DSP
   
      



	
-----------------------------------------------------------------------------
FPGA interface to Acq Board
-----------------------------------------------------------------------------
Need some way of partitioning the events as they come in
some way of passing updated cmd bytes to the dsp
some way of interpreting the writes to the cmd word as, well, commands



