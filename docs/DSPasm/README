DSPasm overview and organization

1. introduction
2. ADSP-21262 overview
   SIMD core
   Memory banks
   zero overhead addressing via the DAGs
   two register sets
   PP DMA

3. State Variables and modes; dma interactions and interrupt configuration [ALL THE STUFF COMMON TO ALL MODES OR DEALING WITH CROSS-MODE INTERFACES)

   a. There are three primary loops, samples, events, and timer. Explain aalocation of alternative register sets. 

   b. events continually polls for new events, processes them, and dispatches the results or changes the relevant settings. 
   c. timer maintains the interal timer and is inc'd by the relevant interrupt
   d. an event can set the bits of the SAMPLING register; SAMPLING[0] enables the SAMPLE interrupt, and SAMPLING[1] locks out state-changes to the DSP and acqboard.

INT0: Increment timestamp, clear if FLAG3 = 1
INT1: New samples, process new chunk of data
FLAG2: poll to see if there are new events!
   e. DMA operation : all functions which access DMA will disable the SAMPLE interrupt, because there is only one set of DMA registers and DMA operations cannot be interrupted


4. Memory organization, pins, SIMD configuration, DAG organization, etc. 
   a. PM memory maintains the code and the filters and output buffers
   b. dm memory maintains sample buffers and relevant variables
   c. SIMD configuration and concerns
   d. DAGs : one set for h[n], one for x[n]. 


4.5 Init and related functions
   
4.7 Timer
    Interrupts, etc. 
5. Samples Overview
   a. dma sequencing
   etc. etc. filtering etc. 


6. Events overview:
   read_status
   read_event
   write_event
   write_acqboard
   
   all lock DMA


   a. cmdid tomfoolery 
   b. how we're handling state variables
   c. the giant-ass FSM
   d. error generation
7. kernel loader

