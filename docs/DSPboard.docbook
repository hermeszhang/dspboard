<?xml version="1.0" ?>
<article>
  <articleinfo>
    <title>The SOMA DSPboard</title>
    <author>
      <firstname>Eric</firstname>
      <surname>Jonas</surname>
    </author>
  </articleinfo>
  <section id="DSPboard.intro">
    <title>The DSPboard</title>
    <para> The Soma DSPboard is the computational and signal
    processing core of the Soma system. The DSPboard is responsible
    for decoding the optical Acquisiton Board data stream, performing
    application-specific filtering and processing on the incoming
    data, and passing the resulting data onto the Data bus. The DSP
    Board also maintains tetrode state, and provides an event bus
    interface for Acquisition board parameters.
    </para>
  <section id="DSPboard.requirements">
    <title>DSP Board Requirements and hardware selection</title>
    <para>For multiunit tetrode recording, the DSP Board must perform
    user-programmable digital filtering on the raw 32 ksps 10-channel
    data from the Acquisition board. Our signal processing
    requirements were as follows:
    </para>
    <itemizedlist>
      <listitem>
	<para> Processing speed: To perform 200-tap FIR filtering on
	each incoming sample would require 64 million
	multiply-accumulates per second -- we judged 200 coefficients
	to be the maximum conceivable length any user would need when
	filtering incoming data.
	</para>
      </listitem>
      <listitem>
	<para> Floating-point multiply-accumulate: Fixed-point DSP
	requires careful consideration, especially in the IIR case, to
	avoid instability and overflow. This level of attention to
	filter coefficient selection is undesirable in any system
	where end-users are performing filter design, as it requires
	detailed understanding of the various stages of processing
	quantization. Thus, all DSP operations must use floatin-point
	arithmatic.
	</para>
      </listitem>
      <listitem>
	<para> Open/inexpensive development tools: Any DSP we select
	needs to have inexpensive development tools, ideally ones that
	are Free Software. Since the bulk of DSP development will be
	performed in assembly, at the very least it would be ideal if
	a Free assembler existed.
	</para>
      </listitem>
      <listitem>
	<para> Ease of assembly: Due to the limited anticipated volume
	production, any DSP considered needs to be avialble in a
	hand-solderable (non-BGA) package</para>
      </listitem>
    </itemizedlist>
    
    </section>
    <section>
      <title>DSP Board Hardware</title>
      
      <para> The Analog Devices SHARC ADSP-21262 comes closest to
      meeting the DSP criteria. The 200 MHz 32-bit floating point DSP
      has an SIMD ALU allowing for up to 400 MMACS/second, and is
      available in a 144-pin LQFP package. The development tools
      (VisualDSP++) are expensive but available at a reduced price to
      academic institutions. To allow for processing overhead, we use
      two DSPs, one per tetrode.
      </para>
      
      <para> A Xilinx Spartan-3 XCS200 FPGA is used to decode the
      Acquisition Board optical data stream and pass it onto the DSPs,
      as well as providing the necessary buffering and interface to
      the Data Bus and Event Bus. </para>
      
      <section>
	<title>Interfaces</title>
	<para> Data Bus </para>
	<para> Event Bus </para>
	
	<section> 
	  <title>FPGA / DSP Interface </title>
	  <para> The ADSP supports several external serial interfaces,
	  as well as an asychronous 16-bit memory bus (the Parallel
	  Port), the latter being the only method with sufficient
	  bandwidth for our application. The ADSP-21262 automatically
	  performs 16-to-32bit packing and unpacking between the
	  Parallel Port and its internal memory, and is only able to
	  access the Parallel Port via Direct Memory Access
	  (DMA). </para>

	  <para> The external memory space is partitioned into five
	  application-specific 12-bit regions: </para>

	  <itemizedlist>
	    <listitem>
	      <para>
	      0x0nnn: Status and  Data  Samples</para>
	      <para>This DSP-read-only region contains new sample data
	      and status information.</para>
	      <memmap title="Status and Data Samples">
		<addr a="0x0000">
		  <para>Acquisition Board status</para>
		  <itemizedlist>
		    
		    <listitem><para><emphasis>Bit 0</emphasis>:
		    STATUS, the status of the optical connection (1=
		    link up)</para></listitem>
		    
		    <listitem><para><emphasis>Bit 1</emphasis>:
		    TXERROR, fiber command transmit
		    error</para></listitem>
		    
		    <listitem><para><emphasis>Bits 4:7</emphasis>:
		    CMDID, the most recent command ID
		    </para></listitem>
		    
		    <listitem><para><emphasis>Bits 8:11</emphasis>:
		    CMDSTS, the most recent command status
		    </para></listitem>
		    
		  </itemizedlist>
		</addr>
		<addr a="0x0001">Sample from channel 1</addr>
		<addr a="0x0002">Sample from channel 2</addr>
		<addr a="0x0003">Sample from channel 3</addr>
		<addr a="0x0004">Sample from channel 4</addr>
		<addr a="0x0005">Continuous data sample</addr>
		<addr a="0x0006">Debug value for read-testing, always equals 
		<addr>0x1234</addr>.
		</addr>
		<addr a="0x0007">The Event Bus ID assigned to this DSP</addr>
		
	      </memmap>
	    </listitem>

	  </itemizedlist>
	</section>
      </section>
    </section>
  </section>
</article>

