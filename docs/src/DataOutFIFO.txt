Data output fifo

We configure the data output fifo to let people request fifo elements,
fill them, and then we queue them up for transmission.

This lets us use the DSP's descriptor-based DMA system if we want. 

Note that there is no guarantee that commit() will be called in the
same set chunk of code as request()

This way, simple code can avoid having to perform duplicated writes if we
know in advance where buffers will live.

DataOutBuffer: 

We return pointers to objects of type DataOutBuffer, a simple buffer wrapper with a .buffer[] member variable, a .state, and a .commit() function. 

The states are: 

DOB_NONE: This buffer is not currently in use
DOB_WRITING: this buffer is held by a client, and may be being written to. 
DOB_TXREADY: The client is done writing this buffer, and it is ready for transmission
DOB_SENDING: The fifo is currently transmitting this buffer. 

We initially create an array of these and set their state_ to none. They are all of size BUFSIZE, which can be returned via the size() method. 

How many do we create? initially we allocate space for one for each possible output device that would request one at a given time, plus one. 

So, assuming we have 6 possible data sinks, we create 12 of these objects, or 3.6 kB @ 600 bytes each. We return pointers to our own internal array. 



pDp = dataOutFifo.requst()
pDp.buffer []
pDp.commit()

we then use the dsp object's underlying :
data_send()


What do we need from the DSP? Well, we're sending this out
the... SPORT, right? at 25 Mbps that's 200 us for 600B.

The DSP Data output module will need to keep track of what has been
transmitted, what will be transmitted, etc.

DSPDataOut.sendBuffer()
DSPDataOut.checkDone()

dsp.datasend(*ptr, N)
dsp.datadone()


