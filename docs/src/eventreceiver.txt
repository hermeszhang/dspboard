EventReceiver: 

We use DMA to periodically DMA in a whole ECYCLE's worth of events,
and then parse the resulting 1000-byte buffer. We tried doing more
complex things, but PPI timing is tricky and we're low on FPGA
real-estate.

---------------------------------------------------------------------------
EventRX 
---------------------------------------------------------------------------
At the moment we DMA in a full word based on ECYCLE using 2-d dma
which is autobuffered. 

Definitions: 

currentReadBuffer: the # of buffer that we're currently reading from
currentWriteBuffer: the # of buffer that we're currently writing to; this
   is the pointer that's incremeneted on every sweep of the autodma

We process events via

processEvents():
  Check if mostRecentProcessedBuffer != nextBufferToProcess and if so, 
  process the buffer by:

  getBuffer() : returns the buffer
  doneBuffer() : says we're done with this buffer



----------------------------------------------------------------------------
EventDispatch
---------------------------------------------------------------------------
EventDispatch takes in a properly-formatted (read off PPI) 512-word
data buffer and converts it to events, and calls events
based on the CMD of the event. 

We use FastDelegate from The Code Project to give us very fast
function-pointer-like performance. 

To register to receive a particular event, create a member
function with signature void (Event_t *) (i.e. "processEvent" below) 
and register it (with your target CMD) as:
  
  EventDispatch.registerCallback(CMD, 
      fastdelegate::MakeDelegate(&eh, &EventHandler::processEvent)); 
Where eh is your EventHandler instance and &EventHandler::processEvent) is
your main function. 


When we get a new EventBuffer, we call
parseEcycle(Buffer) 

which will reset the relevant pointers; Then to process
events we loop, calling dispatchEvents() until it returns false, 
indicating the end of an event cycle buffer; 

Note that dispatchEvents() will dispatch events in sets of 8, 
returning quickly if there are no set events. 


HEre is an example dump of an event buffer from memory; in this 
example device[0] has broadcast an event to all devices. 

0xff900000:     0xbc00  0x0100  0x0000  0x0000  0x0000  0x0000  0x0001  0x0000
0xff900010:     0x0000  0x0000  0x0000  0x0000  0x0100  0x0000  0x0000  0x0000
0xff900020:     0x0000  0x0001  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000
0xff900030:     0x1000  0x0000  0xde8e  0x8ce6  0x0000  0x0000  0xa201  0x0100
0xff900040:     0x0003  0x3df8  0x0000  0x0008  0x9402  0x0000  0x0000  0x0000
0xff900050:     0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000
0xff900060:     0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000
0xff900070:     0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000
0xff900080:     0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000
0xff900090:     0x3308  0x030e  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000
0xff9000a0:     0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000
0xff9000b0:     0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000  0x0000

