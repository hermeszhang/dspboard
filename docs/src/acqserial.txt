This is the very low-level interface to the acquisition board serial stream.

we have two structs: 

AcqFrame:
  uint8_t cmdsts; 
  uint8_t cmdid; 
  uint16_t samples[10]

AcqCommand:
  uint8_t cmd; 
  uint8_t cmdid; 
  uint32_t data; 


We have a class AcqSerial() which:
1. sets up the SPORT DMA
2. installs the necessary interrupt handlers
3. creates the various DMA memory spaces

.checkRxEmpty() -- are there any current samples? 
.getNextFrame(*AcqFrame) -- copies the data into an AcqFrame
.sendCommand(const & acqCMD)

should the "link go down...." -- still need to figure this out


The DSP implementation performs autobuffered 2-d DMA for rx with the
inner loop triggering an interrupt. This interrupt is used to advance
the curRXpos_ pointer.

EmpytTXBuffer_ is a no-op buffer with all zeros. CommandTXBuffer_ is a
buffer where we write a command.

When we write a command we set the txPending_ flag. Upon completion of
a TX buffer DMA, we cause an interrupt to
  
void TXDMAdoneISR(void)
  which checks if there's a pending operation. if there is, we
  configure the next DMA to use the commandTXBuffer_ and clear pending. 
  else we just send another nop buffer. 
  

void RXDMAdoneISR(void)
  increments the curRXpos_
  
