
ARCHITECTURE(ADSP-21065L)

//
// ADSP-21065L Memory Map:
//   ------------------------------------------------
//   Internal memory  0x0000 0000 to 0x0007 ffff
//   ------------------------------------------------
//                    0x0000 0000 to 0x0000 00ff  IOP Regs
//                    0x0000 0100 to 0x0000 01ff  IOP Regs of Processor ID 001
//                    0x0000 0200 to 0x0000 02ff  IOP Regs of Processor ID 002
//                    0x0000 0300 to 0x0000 07ff  Reserved
//           Block 0  0x0000 8000 to 0x0000 9fff  Normal Word (32/48) Addresses
//                   (0x0000 8000 to 0x0000 97ff) 48-bit words
//                   (0x0000 8000 to 0x0000 9fff) 32-bit words
//					  0x0000 A000 to 0x0000 Bfff  Reserved
//           Block 1  0x0000 C000 to 0x0000 Dfff  Normal Word (32/48) Addresses
//                   (0x0000 C000 to 0x0000 Cfff) 48-bit words
//                   (0x0000 C000 to 0x0000 Dfff) 32-bit words
//					  0x0000 E000 to 0x0000 ffff  Reserved
//           Block 0  0x0001 0000 to 0x0001 3fff  Short Word (16) Addresses
//					  0x0001 4000 to 0x0001 7fff  Reserved
//           Block 1  0x0001 8000 to 0x0001 Bfff  Short Word (16) Addresses
//					  0x0001 C000 to 0x0001 ffff  Reserved
//   ------------------------------------------------
//   External memory  0x0002 0000 to 0x03ff ffff
//   ------------------------------------------------
//   External Bank 0  0x0002 0000 to 0x00ff ffff
//   External Bank 1  0x0100 0000 to 0x01ff ffff
//   External Bank 2  0x0200 0000 to 0x02ff ffff
//   External Bank 3  0x0300 0000 to 0x03ff ffff
//


SEARCH_DIR( $ADI_DSP\21k\lib; $ADI_DSP\21k\include)

$LIBRARIES = lib060.dlb ;

$OBJECTS = $COMMAND_LINE_OBJECTS  ;


MEMORY
{
	// SOMA uses the ISR table, a pm space for code and data, the data space, and the external port
	isr_tabl{ TYPE(PM RAM) START(0x00008000) END(0x0000807f) WIDTH(48) }
	pm_code { TYPE(PM RAM) START(0x00008080) END(0x00008fff) WIDTH(48) }
	pm_data { TYPE(PM RAM) START(0x00009800) END(0x00009fff) WIDTH(32) }
	dm_data { TYPE(DM RAM) START(0x0000C000) END(0x0000Cfff) WIDTH(32) }
	port_data { TYPE(PORT) START(0x00020000) END(0x0002FFFF) WIDTH(32) }

}// End MEMORY


PROCESSOR p0
{
    LINK_AGAINST( $COMMAND_LINE_LINK_AGAINST)	// Other object files to link against.
    OUTPUT( $COMMAND_LINE_OUTPUT_FILE )		// Resulting executable file name.

    SECTIONS
    {
		//  Map the sections specified in the program files to sections declared in 
		//  MEMORY and use these sections to create the object file for processor p0. 

		.pm_code
		{
			INPUT_SECTIONS( $OBJECTS(pm_code) $LIBRARIES(pm_code))
		} >pm_code

		.pm_data
		{
			INPUT_SECTIONS( $OBJECTS(pm_data) $LIBRARIES(pm_data))
		} >pm_data

		.dm_data
		{
			INPUT_SECTIONS( $OBJECTS(dm_data) )
		} >dm_data

		.port_data
		{
			INPUT_SECTIONS( $OBJECTS(port_data))
		} >port_data

		.isr_tabl
		{
			INPUT_SECTIONS( $OBJECTS(isr_tabl) $LIBRARIES(isr_tabl))
		} >isr_tabl





		
    }// End SECTIONS
} // End p0
