
ARCHITECTURE(ADSP-21262)

//
//   ADSP-21262 Memory Map:
//   ------------------------------------------------
//                    0x0000 0000 to 0x0003 FFFF  IOP Regs
//           Block0   0x0004 0000 to 0x0004 3FFF  Long word (64) Space (1MB RAM)
//           Block0   0x0004 4000 to 0x0005 7FFF  Internal Memory (Reserved 5MB)
//           Block0   0x0005 8000 to 0x0005 FFFF  Long word (64) Space (2MB ROM) 

//           Block1   0x0006 0000 to 0x0006 3FFF  Long word (64) Space (1MB RAM) 
//           Block1   0x0006 4000 to 0x0007 7FFF  Internal Memory (Reserved 5MB) 
//           Block1   0x0007 8000 to 0x0007 FFFF  Long word (64) Space (2MB ROM) 

//           Block0   0x0008 0000 to 0x0008 7FFF  Normal word (32) Space (1MB RAM) 
//           Block0   0x0008 8000 to 0x000A FFFF  Internal Memory (Reserved 5MB) 
//           Block0   0x000B 0000 to 0x000B FFFF  Normal word (32) Space (2MB ROM)
//   ------------------------------------------------
//                    0x000A 0000 to 0x000A AAAA  48-bit addresses
//   ------------------------------------------------
//           Block1   0x000C 0000 to 0x000C 7FFF  Normal word (32) Space (1MB RAM)
//           Block1   0x000C 8000 to 0x000E FFFF  Internal Memory (Reserved 5MB)
//           Block1   0x000F 0000 to 0x000F FFFF  Normal word (32) Space (2MB ROM)
//   ------------------------------------------------
//                    0x000E 0000 to 0x000E AAAA  48-bit addresses
//   ------------------------------------------------
//           Block0   0x0010 0000 to 0x0010 FFFF  Short word (16) Space (1MB RAM)
//           Block0   0x0011 0000 to 0x0015 FFFF  Internal Memory (Reserved 5MB)
//           Block0   0x0011 0000 to 0x0015 FFFF  Internal Memory (Reserved 5MB)
//           Block0   0x0016 0000 to 0x0017 FFFF  Short word (16) Space (2MB ROM)

//           Block1   0x0018 0000 to 0x0018 FFFF  Short word (16) Space (1MB RAM)
//           Block1   0x0019 0000 to 0x001D FFFF  Internal Memory (Reserved 5MB)
//           Block1   0x001E 0000 to 0x001F FFFF  Short word (16) Space (2MB ROM)

//   ------------------------------------------------
//   External memory  0x0020 0000 to 0x3FFF FFFF  
//   ------------------------------------------------

//   ------------------------------------------------
//   World Recall Space for internal RAM 
//   ------------------------------------------------
//                    0x4000 0000 to 0x7FFF FFFF  

//   ------------------------------------------------
//   Block Recall Space for internal RAM
//   ------------------------------------------------
//                    0x8000 0000 to 0xFFFF FFFF  

#ifdef _ADI_THREADS
#ifdef __ADI_LIBEH__
$LIBRARIES = libehmt.dlb, libc26xmt.dlb, libiomt.dlb, libdsp26x.dlb;
#else
$LIBRARIES = libc26xmt.dlb, libiomt.dlb, libdsp26x.dlb;
#endif
#else
#ifdef __ADI_LIBEH__
$LIBRARIES = libeh.dlb, libc26x.dlb, libio.dlb, libdsp26x.dlb;
#else
$LIBRARIES = libc26x.dlb, libio.dlb, libdsp26x.dlb;
#endif
#endif

// Libraries from the command line are included in COMMAND_LINE_OBJECTS.
$OBJECTS = $COMMAND_LINE_OBJECTS;

MEMORY
{
  seg_rth  { TYPE(PM RAM) START(0x00080000) END(0x000800ff) WIDTH(48) }
  seg_init { TYPE(PM RAM) START(0x00080100) END(0x000801ff) WIDTH(48) }
  seg_int_code { TYPE(PM RAM) START(0x00080200) END(0x00080287) WIDTH(48) }
  seg_pmco { TYPE(PM RAM) START(0x00080288) END(0x000841ff) WIDTH(48) }
  seg_pmda { TYPE(PM RAM) START(0x00086300) END(0x00087fff) WIDTH(32) }

	seg_dm32da { TYPE(DM RAM) START(0x000c0000) END(0x000c3fff) WIDTH(32) }
	seg_dm16da { TYPE(DM RAM) START(0x00188000) END(0x0018ffff) WIDTH(16) }
}


PROCESSOR P0
{
    OUTPUT( $COMMAND_LINE_OUTPUT_FILE )

    SECTIONS
    {
		// .text output section
		seg_rth
		{
			INPUT_SECTIONS( $OBJECTS(seg_rth) $LIBRARIES(seg_rth))
		} >seg_rth

		seg_init
		{
			ldf_seginit_space = . ;
			INPUT_SECTIONS( $OBJECTS(seg_init) $LIBRARIES(seg_init))
		} >seg_init

		seg_int_code
		{
			INPUT_SECTIONS( $OBJECTS(seg_int_code) $LIBRARIES(seg_int_code))
		} >seg_int_code

		seg_pmco
		{
			INPUT_SECTIONS( $OBJECTS(seg_pmco) $LIBRARIES(seg_pmco))
		} >seg_pmco

		seg_pmda
		{
			INPUT_SECTIONS( $OBJECTS(seg_pmda) $LIBRARIES(seg_pmda))
		} >seg_pmda


		seg_dm32da
		{
			INPUT_SECTIONS( $OBJECTS(seg_dm32da) $LIBRARIES(seg_dm32da))
		} > seg_dm32da

		seg_dm16da
		{
			INPUT_SECTIONS( $OBJECTS(seg_dm16da) $LIBRARIES(seg_dm16da))
		} > seg_dm16da


		
    }
}

