DSPboard FPGA testbench

Wow, this is going to be complicated. We need to fake:

ADSP memory interface
a series of things for the ADSP to actually _do_ 
_both_ of them

Data bus
event bus

fiber/acqboard
wow, that's pretty rough

The acqboard rx/dx part is actually pretty easy. 

Ideally, we'll just code up what's essentially the DSP code. I.e. we can write functions that "Read" and "Write" from ram, etc. 

I wish we could have a read() function, and a write() function. But i guess the best we can do are read() and write() modules, or better, one big memIO module. We'll be using physical addresses, but whatever :)

So we have the following signals:
MODE: whether we're in 8 or 16-bit mode
ADDR: integer address (go behavioral vhdl!)
DIN : unsigned short in
DOUT : unsigned short out
GO : start transaction
RW : read or write (1 for read, 0 for write)
DONE : tx is done, DOUT has result of most recent transaction
MRD : read line for memory interface
MWE : Write line for memory interface
MADDR: 16-bit output address lines
MDATA: 16-bit bidirectional data lines
CLK : clock signal 

Now, we need a fake event interface too...

I've figured out how to use procedures!!!



Things working: 

Set device ID
We can toggle RESET flag
we can set the boot mode
we can load up data into the ram for booting
we can read data out during boot up in 8-bit mode successfully. 

We can write events from the DSP into the FPGA and read them on the event bus
The event bus can trigger events and the DSP can read them out of the event queue. 


dataw : write a packet of length N (n < 256 words) to the addr





To do:
   What about event overflow?
   writing actual data buffers, and reading them out
   




